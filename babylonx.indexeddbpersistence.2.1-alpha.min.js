var BABYLONX;(function(n){var t=function(){function n(){}return n.SerializeMesh=function(n){var t=[];return n.subMeshes&&(t=n.subMeshes.map(function(n,t){return{position:t,verticesStart:n.verticesStart,verticesCount:n.verticesCount,indexStart:n.indexStart,indexCount:n.indexCount}})),{uniqueId:n.uniqueId,id:n.id,name:n.name,indices:n.getIndices(),positions:n.getVerticesData(BABYLON.VertexBuffer.PositionKind),sphereCenter:n.getBoundingInfo().boundingSphere.centerWorld.asArray(),sphereRadius:n.getBoundingInfo().boundingSphere.radiusWorld,boxMinimum:n.getBoundingInfo().boundingBox.minimumWorld.asArray(),boxMaximum:n.getBoundingInfo().boundingBox.maximumWorld.asArray(),worldMatrixFromCache:n.worldMatrixFromCache.asArray(),subMeshes:t,checkCollisions:n.checkCollisions}},n}(),i;n.MeshSerialization=t;i=function(){function n(i,r,u){var f=this;r===void 0&&(r="babylonJsMeshes");u===void 0&&(u=!0);this._scene=i;this.uniqueIdCounter_=0;this.onMeshAdded=function(n){n.registerAfterWorldMatrixUpdate(f.onMeshUpdated);f.addUpdateList[n.uniqueId]=t.SerializeMesh(n)};this.onMeshRemoved=function(n){f.remvoeList.push(n.uniqueId)};this.onMeshUpdated=function(n){f.addUpdateList[n.uniqueId]=t.SerializeMesh(n)};this.processLists=function(){var n,t,i;if(f.indexedDb_){n=[];for(t in f.addUpdateList)f.addUpdateList.hasOwnProperty(t)&&(n.push(parseInt(t)),f.processMeshAddedUpdated(f.addUpdateList[t]),delete f.addUpdateList[t]);while(f.remvoeList.length)i=f.remvoeList.pop(),n.push(i),f.processMeshRemoved(i);if(n.length&&f.onDatabaseUpdated)f.onDatabaseUpdated(n)}};this.processMeshAddedUpdated=function(t){var i=f.indexedDb_.transaction([n.OBJECT_STORE_NAME],"readwrite"),r;i.oncomplete=function(){};i.onerror=function(n){console.log(n)};r=i.objectStore(n.OBJECT_STORE_NAME);r.put(t,t.uniqueId)};this.processMeshRemoved=function(t){var i=f.indexedDb_.transaction([n.OBJECT_STORE_NAME],"readwrite"),r;i.oncomplete=function(){};i.onerror=function(n){console.log(n)};r=i.objectStore(n.OBJECT_STORE_NAME);r.delete(t)};this.addUpdateList={};this.remvoeList=[];this.openDatabase(r,1,!0,function(n){f.indexedDb_=n;f._scene.onNewMeshAdded=f.onMeshAdded;f._scene.onMeshRemoved=f.onMeshRemoved;f._scene.registerAfterRender(f.processLists);u&&setTimeout(function(){f._scene.meshes.forEach(function(n,t){f.onMeshAdded(n,t)})})})}return n.prototype.openDatabase=function(t,i,r,u){r&&indexedDB.deleteDatabase(t);var f=indexedDB.open(t,i);f.onerror=function(n){console.log(n)};f.onsuccess=function(){var n=event.target.result;u(n)};f.onupgradeneeded=function(t){var r=t.target.result,i=r.createObjectStore(n.OBJECT_STORE_NAME);i.createIndex("uniqueId","uniqueId",{unique:!0});i.createIndex("name","name",{unique:!1});i.createIndex("id","id",{unique:!1})}},n.prototype.countMeshes=function(t){var i;if(this.indexedDb_){i=this.indexedDb_.transaction([n.OBJECT_STORE_NAME],"readonly");i.onerror=function(n){console.log(n)};var u=i.objectStore(n.OBJECT_STORE_NAME),f=u.index("uniqueId"),r=f.count();r.onsuccess=function(){t(r.result)}}},n.prototype.getAllMeshes=function(t){var r=this.indexedDb_.transaction([n.OBJECT_STORE_NAME]),f=r.objectStore(n.OBJECT_STORE_NAME),u=[],i;r.oncomplete=function(){t(u)};i=f.openCursor();i.onerror=function(n){console.log(n)};i.onsuccess=function(n){var t=n.target.result;t&&(u.push(t.value),t.continue())}},n.OBJECT_STORE_NAME="meshes",n}();n.IndexedDBPersist=i})(BABYLONX||(BABYLONX={}));
